#version 330 core

struct DirLight {
    vec3 direction;
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
}; 

uniform sampler2D texture0;
uniform DirLight dirLight;
uniform vec3 camPos;

in mat4 MVP;
in vec3 vertFrag;
in vec2 uvFrag;
in vec3 normFrag;

out vec3 color;

vec3 CalcDirLight(DirLight light, vec3 normal, vec3 viewDir)
{
    vec3 lightDir = normalize(-light.direction);
    // diffuse shading
    float diff = max(dot(normal, lightDir), 0.0);
    // specular shading
    vec3 reflectDir = reflect(-lightDir, normal);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 0.2f);
    // combine results
    vec3 ambient  = light.ambient  * vec3(texture2D(texture0, uvFrag));
    vec3 diffuse  = light.diffuse  * diff * vec3(texture2D(texture0, uvFrag));
    vec3 specular = light.specular * spec * vec3(texture2D(texture0, uvFrag));
    return (ambient + diffuse + specular);
}

void main()
{
    // properties
    vec3 norm = normalize(normFrag);
    vec3 viewDir = normalize(camPos - vertFrag);

    //Directional lighting
    color = CalcDirLight(dirLight, norm, viewDir);
}